/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process { // SUBWORKFLOW: PREPARE_ASSEMBLY

    withName: '.*:PREPARE_ASSEMBLY:SEQKIT_RMDUP' {
        ext.args = '--by-seq --ignore-case -w 80'
        ext.prefix = { "${meta.id}.seqkit.rmdup" }
    }

    withName: '.*:PREPARE_ASSEMBLY:FASTA_EDTA_LAI:EDTA_EDTA' {
        ext.args = [
            params.edta_is_sensitive ? "--sensitive 1" :  "--sensitive 0",
            "--anno 0",
            "--force 1"
        ].join(' ').trim()

        publishDir = [
            path: { "${params.outdir}/edta" },
            mode: params.publish_dir_mode,
            pattern: '*.EDTA.TElib.fa',
            enabled: params.save_annotated_te_lib
        ]
    }

    withName: '.*:PREPARE_ASSEMBLY:REPEATMODELER_REPEATMODELER' {
        ext.args = '-LTRStruct'

        publishDir = [
            path: { "${params.outdir}/repeatmodeler" },
            mode: params.publish_dir_mode,
            pattern: '*.fa',
            enabled: params.save_annotated_te_lib
        ]
    }

    withName: '.*:PREPARE_ASSEMBLY:REPEATMASKER_REPEATMASKER' {
        ext.args = [
            "-no_is",
            "-xsmall",
        ].join(' ').trim()

        publishDir = [
            path: { "${params.outdir}/repeatmasker" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename },
            enabled: params.repeatmasker_save_outputs
        ]
    }

    withName: '.*:PREPARE_ASSEMBLY:CUSTOM_RMOUTTOGFF3' {
        publishDir = [
            path: { "${params.outdir}/repeatmasker" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename },
            enabled: params.repeatmasker_save_outputs
        ]
    }
}

process { // SUBWORKFLOW: PREPROCESS_RNASEQ
    if(!params.fastqc_skip) {
        withName: '.*:PREPROCESS_RNASEQ:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_RAW' {
            ext.args   = '--quiet'

            publishDir = [
                path: { "${params.outdir}/fastqc_raw" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }

        withName: '.*:PREPROCESS_RNASEQ:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_TRIM' {
            ext.args   = '--quiet'
            ext.prefix = { "${meta.id}_trim" }
            publishDir = [
                path: { "${params.outdir}/fastqc_trim" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }

    if(!params.fastp_skip) {
        withName: '.*:PREPROCESS_RNASEQ:FASTQ_FASTQC_UMITOOLS_FASTP:FASTP' {
            ext.args   = params.fastp_extra_args ?: ''
            publishDir = [
                [
                    path: { "${params.outdir}/fastp/html" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html}"
                ],
                [
                    path: { "${params.outdir}/fastp/json" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{json}"
                ],
                [
                    path: { "${params.outdir}/fastp/log" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/fastp" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    enabled: params.save_trimmed
                ]
            ]
        }
    }

    if (params.remove_ribo_rna) {
        withName: '.*:PREPROCESS_RNASEQ:SORTMERNA_INDEX' {
            ext.args   = '--index 1'
        }

        withName: '.*:PREPROCESS_RNASEQ:SORTMERNA_READS' {
            ext.args   = '--index 0 --num_alignments 1 -v'
            publishDir = [
                [
                    path: { "${params.outdir}/sortmerna" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/sortmerna" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    enabled: params.save_non_ribo_reads
                ]
            ]
        }
    }
}

process { // SUBWORKFLOW: ALIGN_RNASEQ
    withName: '.*:ALIGN_RNASEQ:STAR_ALIGN' {
        ext.args = [
            "--outSAMstrandField intronMotif",
            "--outSAMtype BAM SortedByCoordinate",
            "--readFilesCommand gunzip -c",
            "--alignIntronMax ${params.star_max_intron_length}",
            params.star_align_extra_args ? params.star_align_extra_args.split("\\s(?=--)") : ''
        ].flatten().unique(false).join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/star/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.star_save_outputs
        ]
    }

    withName: '.*:ALIGN_RNASEQ:SAMTOOLS_CAT' {
        publishDir = [
            path: { "${params.outdir}/star/cat_bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_cat_bam
        ]
    }
}

process { // SUBWORKFLOW: FASTA_BRAKER3
    withName: '.*:FASTA_BRAKER3:BRAKER3' {
        ext.args = [
            "--gff3",
            params.braker_extra_args ? params.braker_extra_args.split("\\s(?=--)") : ''
        ].flatten().unique(false).join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/etc/braker/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.braker_save_outputs
        ]
    }
}

process { // SUBWORKFLOW: FASTA_LIFTOFF
    withName: '.*:FASTA_LIFTOFF:LIFTOFF' {
        ext.args = [
            '-exclude_partial',
            '-copies',
            '-polish',
            "-a $params.liftoff_coverage",
            "-s $params.liftoff_identity"
        ].join(' ').trim()
    }

    withName: '.*:FASTA_LIFTOFF:GFFREAD_BEFORE_LIFTOFF' {
        ext.args = '--no-pseudo --keep-genes'
    }

    withName: '.*:FASTA_LIFTOFF:MERGE_LIFTOFF_ANNOTATIONS' {
        ext.prefix = { "${meta.id}.merged.liftoffs" }
    }

    withName: '.*:FASTA_LIFTOFF:AGAT_SPFILTERFEATUREFROMKILLLIST' {
        ext.prefix = { "${meta.id}.invalid.orf.purged" }
    }

    withName: '.*:FASTA_LIFTOFF:GFFREAD_AFTER_LIFTOFF' {
        ext.prefix = { "${meta.id}.liftoff" }
        ext.args = '--keep-genes'
    }

    withName: '.*:FASTA_LIFTOFF:GT_GFF3_AFTER_LIFTOFF' {
        ext.prefix = { "${meta.id}.liftoff.fixed" }
        ext.args = '-tidy -retainids -sort'
    }

    withName: '.*:FASTA_LIFTOFF:GFF_TSEBRA_SPFILTERFEATUREFROMKILLLIST:AGAT_CONVERTSPGFF2GTF' {
        ext.args = '--gtf_version relax'
    }

    withName: '.*:FASTA_LIFTOFF:GFF_TSEBRA_SPFILTERFEATUREFROMKILLLIST:KILL_TSEBRA_ISOFORMS' {
        ext.prefix = { "${meta.id}.liftoff.1form" }
    }
}

process { // SUBWORKFLOW: PURGE_BRAKER_MODELS

    withName: '.*:PURGE_BRAKER_MODELS:GFF_TSEBRA_SPFILTERFEATUREFROMKILLLIST:AGAT_CONVERTSPGFF2GTF' {
        ext.args = '--gtf_version relax'
    }

    withName: '.*:PURGE_BRAKER_MODELS:GFF_TSEBRA_SPFILTERFEATUREFROMKILLLIST:KILL_TSEBRA_ISOFORMS' {
        ext.prefix = { "${meta.id}.1form" }
    }
}

process { // SUBWORKFLOW: GFF_MERGE_CLEANUP
    withName: '.*:GFF_MERGE_CLEANUP:AGAT_SPMERGEANNOTATIONS' {
        ext.prefix = { "${meta.id}.liftoff.braker" }
    }

    withName: '.*:GFF_MERGE_CLEANUP:GT_GFF3' {
        ext.args = '-tidy -retainids -sort'
    }
}

process { // SUBWORKFLOW: GFF_EGGNOGMAPPER
    withName: '.*:GFF_EGGNOGMAPPER:GFF2FASTA_FOR_EGGNOGMAPPER' {
        ext.args = '-y'
    }

    withName: '.*:GFF_EGGNOGMAPPER:EGGNOGMAPPER' {
        ext.args = [
            "--evalue $params.eggnogmapper_evalue",
            "--pident $params.eggnogmapper_pident",
            params.eggnogmapper_tax_scope ? "--tax_scope $params.eggnogmapper_tax_scope" : '',
            '--mp_start_method fork',
            "--itype proteins",
            '--go_evidence all'
        ].join(' ').trim()

        publishDir = [
            path: { "${params.outdir}/annotations/$meta.id" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

process { // SUBWORKFLOW: PURGE_NOHIT_MODELS
    withName: '.*:PURGE_NOHIT_MODELS:AGAT_SPFILTERFEATUREFROMKILLLIST' {
        ext.prefix = { "${meta.id}.nohits.purged" }
    }
}

process { // SUBWORKFLOW: GFF_STORE
    withName: '.*:GFF_STORE:FINAL_GFF_CHECK' {
        ext.args = '-tidy -retainids -sort'

        publishDir = [
            path: { "${params.outdir}/annotations/$meta.id" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*:GFF_STORE:EXTRACT_PROTEINS' {
        ext.args = params.add_attrs_to_proteins_fasta ? '-F -D -y' : '-y'
        ext.prefix = { "${meta.id}.pep" }

        publishDir = [
            path: { "${params.outdir}/annotations/$meta.id" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

process { // SUBWORKFLOW: FASTA_ORTHOFINDER
    withName: '.*:FASTA_ORTHOFINDER:FASTA_GUNZIP:GUNZIP' {
        ext.prefix = { "${meta.id}.pep" }
    }

    withName: '.*:FASTA_ORTHOFINDER:ORTHOFINDER' {
        publishDir = [
            [
                path: { "${params.outdir}/orthofinder" },
                mode: params.publish_dir_mode,
                pattern: 'Comparative_Genomics_Statistics'
            ],
            [
                path: { "${params.outdir}/orthofinder" },
                mode: params.publish_dir_mode,
                pattern: 'Gene_Duplication_Events'
            ],
            [
                path: { "${params.outdir}/orthofinder" },
                mode: params.publish_dir_mode,
                pattern: 'Orthogroups'
            ],
            [
                path: { "${params.outdir}/orthofinder" },
                mode: params.publish_dir_mode,
                pattern: 'Phylogenetic_Hierarchical_Orthogroups'
            ],
            [
                path: { "${params.outdir}/orthofinder" },
                mode: params.publish_dir_mode,
                pattern: 'Species_Tree'
            ]
        ]
    }
}

process { // SUBWORKFLOW: FASTA_GXF_BUSCO_PLOT
    withName: '.*:FASTA_GXF_BUSCO_PLOT:BUSCO_ASSEMBLY' {
        ext.args = '--metaeuk'
        publishDir = [
            path: { "${params.outdir}/busco/fasta" },
            mode: params.publish_dir_mode,
            pattern: 'short_summary.*.txt',
            saveAs: { filename -> "short_summary.specific.${meta.id}.${lineage}.txt" }
        ]
    }

    withName: '.*:FASTA_GXF_BUSCO_PLOT:PLOT_ASSEMBLY' {
        ext.prefix = 'busco_figure'
        publishDir = [
            path: { "${params.outdir}/busco/fasta" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FASTA_GXF_BUSCO_PLOT:EXTRACT_PROTEINS' {
        ext.args = '-y'
    }

    withName: '.*:FASTA_GXF_BUSCO_PLOT:BUSCO_ANNOTATION' {
        ext.args = '--metaeuk'
        publishDir = [
            path: { "${params.outdir}/busco/gff" },
            mode: params.publish_dir_mode,
            pattern: 'short_summary.*.txt',
            saveAs: { filename -> "short_summary.specific.${meta.id}.${lineage}.txt" }
        ]
    }

    withName: '.*:FASTA_GXF_BUSCO_PLOT:PLOT_ANNOTATION' {
        ext.prefix = 'busco_figure'
        publishDir = [
            path: { "${params.outdir}/busco/gff" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }
}

process { // SUBWORKFLOW: GXF_FASTA_AGAT_SPADDINTRONS_SPEXTRACTSEQUENCES
    withName: '.*:GXF_FASTA_AGAT_SPADDINTRONS_SPEXTRACTSEQUENCES:AGAT_SPEXTRACTSEQUENCES' {
        ext.args = '-t intron'
    }
}

process { // WORKFLOW: GENEPAL

    withName: '.*:GENEPAL:SAVE_MARKED_GFF3' {
        publishDir = [
            path: { "${params.outdir}/etc/splicing_marked" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*:GENEPAL:BENCHMARK' {
        publishDir = [
            path: { "${params.outdir}/benchmark" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: '*.stats'
        ]
    }

    withName: '.*:GENEPAL:MULTIQC' {
        ext.args = '--verbose'
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: 'multiqc_report.html',
            contentType: 'text/html'
        ]
    }

    withName: '.*:GENEPAL:GENEPALREPORT' {
        publishDir = [
            [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                pattern: 'genepal_report.html',
                contentType: 'text/html'
            ],
            [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                pattern: 'genepal_data'
            ]
        ]
    }
}
