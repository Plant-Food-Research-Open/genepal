process {
    withName: 'EDTA' {
        ext.args = [
            params.edta.is_sensitive ? "--sensitive 1" :  "--sensitive 0",
            "--anno 0",
            "--force 1"
        ].join(' ').trim()
    }

    withName: 'RESTORE_EDTA_IDS' {
        publishDir = [
            path: { "${params.outdir}/edta/${meta.id}" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename },
            enabled: params.edta.save_outputs
        ]
    }

    withName: 'REPEATMASKER' {
        ext.args = [
            "-no_is",
            "-xsmall",
        ].join(' ').trim()
        
        publishDir = [
            path: { "${params.outdir}/repeatmasker" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename },
            enabled: params.repeatmasker.save_outputs
        ]
    }
}

if(!params.sample_prep.skip_fastqc) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_RAW' {
        ext.args   = '--quiet'
        }

        withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_TRIM' {
            ext.args   = '--quiet'
            publishDir = [
                path: { "${params.outdir}/fastp/fastqc" },
                mode: "copy",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }
}

if(!params.sample_prep.skip_fastp) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTP' {
            ext.args   = params.sample_prep.extra_fastp_args ?: ''
            publishDir = [
                [
                    path: { "${params.outdir}/fastp/html" },
                    mode:  "copy",
                    pattern: "*.{html}"
                ],
                [
                    path: { "${params.outdir}/fastp/json" },
                    mode:  "copy",
                    pattern: "*.{json}"
                ],
                [
                    path: { "${params.outdir}/fastp/log" },
                    mode:  "copy",
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/fastp" },
                    mode:  "copy",
                    pattern: "*.fastq.gz",
                    enabled: params.sample_prep.save_trimmed
                ]
            ]
        }
    }
}

if (params.sample_prep.remove_ribo_rna) {
    process {
        withName: 'SORTMERNA' {
            ext.args   = '--num_alignments 1 -v'
            publishDir = [
                [
                    path: { "${params.outdir}/sortmerna" },
                    mode: "copy",
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/sortmerna" },
                    mode: "copy",
                    pattern: "*.fastq.gz",
                    enabled: params.sample_prep.save_non_ribo_reads
                ]
            ]
        }
    }
}

process {
    withName: STAR_ALIGN {
        ext.args = [
            "--outSAMstrandField intronMotif",
            "--outSAMtype BAM SortedByCoordinate",
            "--readFilesCommand gunzip -c",
            "--alignIntronMax ${params.star_align.max_intron_length}",
            params.star_align.extra_star_align_args ? params.star_align.extra_star_align_args.split("\\s(?=--)") : ''
        ].flatten().unique(false).join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/star/alignment" },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.star_align.save_outputs
        ]
    }

    withName: BRAKER3 {
        ext.args = [
            "--gff3",
            params.braker.extra_braker_args ? params.braker.extra_braker_args.split("\\s(?=--)") : ''
        ].flatten().unique(false).join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/braker/" },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}