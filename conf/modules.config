process {
    withName: 'EDTA_EDTA' {
        ext.args = [
            params.edta_is_sensitive ? "--sensitive 1" :  "--sensitive 0",
            "--anno 0",
            "--force 1"
        ].join(' ').trim()

        publishDir = [
            path: { "${params.outdir}/edta" },
            mode: "copy",
            pattern: '*.EDTA.TElib.fa',
            enabled: params.edta_save_te_lib
        ]
    }

    withName: 'REPEATMASKER' {
        ext.args = [
            "-no_is",
            "-xsmall",
        ].join(' ').trim()
        
        publishDir = [
            path: { "${params.outdir}/repeatmasker" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename },
            enabled: params.repeatmasker_save_outputs
        ]
    }
}

if(!params.skip_fastqc) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_RAW' {
        ext.args   = '--quiet'
        }

        withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_TRIM' {
            ext.args   = '--quiet'
            publishDir = [
                path: { "${params.outdir}/fastp/fastqc" },
                mode: "copy",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
    }
}

if(!params.skip_fastp) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTP' {
            ext.args   = params.extra_fastp_args ?: ''
            publishDir = [
                [
                    path: { "${params.outdir}/fastp/html" },
                    mode:  "copy",
                    pattern: "*.{html}"
                ],
                [
                    path: { "${params.outdir}/fastp/json" },
                    mode:  "copy",
                    pattern: "*.{json}"
                ],
                [
                    path: { "${params.outdir}/fastp/log" },
                    mode:  "copy",
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/fastp" },
                    mode:  "copy",
                    pattern: "*.fastq.gz",
                    enabled: params.save_trimmed
                ]
            ]
        }
    }
}

if (params.remove_ribo_rna) {
    process {
        withName: 'SORTMERNA' {
            ext.args   = '--num_alignments 1 -v'
            publishDir = [
                [
                    path: { "${params.outdir}/sortmerna" },
                    mode: "copy",
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/sortmerna" },
                    mode: "copy",
                    pattern: "*.fastq.gz",
                    enabled: params.save_non_ribo_reads
                ]
            ]
        }
    }
}

process {
    withName: STAR_ALIGN {
        ext.args = [
            "--outSAMstrandField intronMotif",
            "--outSAMtype BAM SortedByCoordinate",
            "--readFilesCommand gunzip -c",
            "--alignIntronMax ${params.star_max_intron_length}",
            params.star_align_extra_args ? params.star_align_extra_args.split("\\s(?=--)") : ''
        ].flatten().unique(false).join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/star/alignment" },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.star_save_outputs
        ]
    }

    withName: BRAKER3 {
        ext.args = [
            "--gff3",
            params.braker_extra_args ? params.braker_extra_args.split("\\s(?=--)") : ''
        ].flatten().unique(false).join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/braker/" },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

if(params.liftoff_xref_annotations) {
    process {
        withName: LIFTOFF {
            ext.args = '    '
            ext.args = [
                '-copies',
                '-polish',
                "-a $params.liftoff_coverage",
                "-s $params.liftoff_identity"
            ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/liftoff/${meta.id}" },
                mode: "copy",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }

        withName: GFFREAD {
            ext.args = '--no-pseudo --keep-genes'
        }
    }
}

process {
    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: params.outdir,
            pattern: "software_versions.yml",
            mode: "copy",
            enabled: true
        ]
    }
}