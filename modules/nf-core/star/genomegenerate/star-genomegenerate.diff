Changes in module 'nf-core/star/genomegenerate'
--- modules/nf-core/star/genomegenerate/environment.yml
+++ modules/nf-core/star/genomegenerate/environment.yml
@@ -1,9 +1,11 @@
 name: star_genomegenerate
+
 channels:
   - conda-forge
   - bioconda
   - defaults
+
 dependencies:
+  - bioconda::samtools=1.18
   - bioconda::star=2.7.10a
-  - bioconda::samtools=1.18
   - conda-forge::gawk=5.1.0

--- modules/nf-core/star/genomegenerate/main.nf
+++ modules/nf-core/star/genomegenerate/main.nf
@@ -19,9 +19,10 @@
     task.ext.when == null || task.ext.when
 
     script:
-    def args = task.ext.args ?: ''
-    def args_list = args.tokenize()
-    def memory = task.memory ? "--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}" : ''
+    def args        = task.ext.args ?: ''
+    def args_list   = args.tokenize()
+    def memory      = task.memory ? "--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}" : ''
+    def include_gtf = gtf ? "--sjdbGTFfile $gtf" : ''
     if (args_list.contains('--genomeSAindexNbases')) {
         """
         mkdir star
@@ -29,7 +30,7 @@
             --runMode genomeGenerate \\
             --genomeDir star/ \\
             --genomeFastaFiles $fasta \\
-            --sjdbGTFfile $gtf \\
+            $include_gtf \\
             --runThreadN $task.cpus \\
             $memory \\
             $args
@@ -51,7 +52,7 @@
             --runMode genomeGenerate \\
             --genomeDir star/ \\
             --genomeFastaFiles $fasta \\
-            --sjdbGTFfile $gtf \\
+            $include_gtf \\
             --runThreadN $task.cpus \\
             --genomeSAindexNbases \$NUM_BASES \\
             $memory \\
@@ -67,30 +68,52 @@
     }
 
     stub:
-    """
-    mkdir star
-    touch star/Genome
-    touch star/Log.out
-    touch star/SA
-    touch star/SAindex
-    touch star/chrLength.txt
-    touch star/chrName.txt
-    touch star/chrNameLength.txt
-    touch star/chrStart.txt
-    touch star/exonGeTrInfo.tab
-    touch star/exonInfo.tab
-    touch star/geneInfo.tab
-    touch star/genomeParameters.txt
-    touch star/sjdbInfo.txt
-    touch star/sjdbList.fromGTF.out.tab
-    touch star/sjdbList.out.tab
-    touch star/transcriptInfo.tab
+    if (gtf) {
+        """
+        mkdir star
+        touch star/Genome
+        touch star/Log.out
+        touch star/SA
+        touch star/SAindex
+        touch star/chrLength.txt
+        touch star/chrName.txt
+        touch star/chrNameLength.txt
+        touch star/chrStart.txt
+        touch star/exonGeTrInfo.tab
+        touch star/exonInfo.tab
+        touch star/geneInfo.tab
+        touch star/genomeParameters.txt
+        touch star/sjdbInfo.txt
+        touch star/sjdbList.fromGTF.out.tab
+        touch star/sjdbList.out.tab
+        touch star/transcriptInfo.tab
 
-    cat <<-END_VERSIONS > versions.yml
-    "${task.process}":
-        star: \$(STAR --version | sed -e "s/STAR_//g")
-        samtools: \$(echo \$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\$//')
-        gawk: \$(echo \$(gawk --version 2>&1) | sed 's/^.*GNU Awk //; s/, .*\$//')
-    END_VERSIONS
-    """
+        cat <<-END_VERSIONS > versions.yml
+        "${task.process}":
+            star: \$(STAR --version | sed -e "s/STAR_//g")
+            samtools: \$(echo \$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\$//')
+            gawk: \$(echo \$(gawk --version 2>&1) | sed 's/^.*GNU Awk //; s/, .*\$//')
+        END_VERSIONS
+        """
+    } else {
+        """
+        mkdir star
+        touch star/Genome
+        touch star/Log.out
+        touch star/SA
+        touch star/SAindex
+        touch star/chrLength.txt
+        touch star/chrName.txt
+        touch star/chrNameLength.txt
+        touch star/chrStart.txt
+        touch star/genomeParameters.txt
+
+        cat <<-END_VERSIONS > versions.yml
+        "${task.process}":
+            star: \$(STAR --version | sed -e "s/STAR_//g")
+            samtools: \$(echo \$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\$//')
+            gawk: \$(echo \$(gawk --version 2>&1) | sed 's/^.*GNU Awk //; s/, .*\$//')
+        END_VERSIONS
+        """
+    }
 }

--- modules/nf-core/star/genomegenerate/tests/main.nf.test.snap
+++ modules/nf-core/star/genomegenerate/tests/main.nf.test.snap
@@ -5,12 +5,18 @@
                 "versions.yml:md5,46b8f1f34bb7f23892cd1eb249ed4d7f"
             ]
         ],
-        "timestamp": "2023-12-04T18:01:27.298248806"
+        "timestamp": "2023-12-19T11:05:51.741109"
     },
-    "index": {
+    "index_with_gtf": {
         "content": [
-            "star"
+            "[Genome, Log.out, SA, SAindex, chrLength.txt, chrName.txt, chrNameLength.txt, chrStart.txt, exonGeTrInfo.tab, exonInfo.tab, geneInfo.tab, genomeParameters.txt, sjdbInfo.txt, sjdbList.fromGTF.out.tab, sjdbList.out.tab, transcriptInfo.tab]"
         ],
-        "timestamp": "2023-11-23T11:31:47.560528"
+        "timestamp": "2023-12-19T11:38:14.551548"
+    },
+    "index_without_gtf": {
+        "content": [
+            "[Genome, Log.out, SA, SAindex, chrLength.txt, chrName.txt, chrNameLength.txt, chrStart.txt, genomeParameters.txt]"
+        ],
+        "timestamp": "2023-12-19T11:38:22.382905"
     }
 }
--- modules/nf-core/star/genomegenerate/tests/main.nf.test
+++ modules/nf-core/star/genomegenerate/tests/main.nf.test
@@ -28,7 +28,86 @@
         then {
             assertAll(
                 { assert process.success },
-                { assert snapshot(file(process.out.index[0][1]).name).match("index") },
+                { assert snapshot(file(process.out.index[0][1]).listFiles().collect { it.getName() }.sort().toString()).match("index_with_gtf") },
+                { assert snapshot(process.out.versions).match("versions") }
+            )
+        }
+
+    }
+
+    test("homo_sapiens-stub") {
+
+        options '-stub'
+
+        when {
+            process {
+                """
+                input[0] = Channel.of([
+                    [ id:'test_fasta' ],
+                    [file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)]
+                ])
+                input[1] = Channel.of([
+                    [ id:'test_gtf' ],
+                    [file(params.test_data['homo_sapiens']['genome']['genome_gtf'], checkIfExists: true)]
+                ])
+                """
+            }
+        }
+
+        then {
+            assertAll(
+                { assert process.success },
+                { assert snapshot(file(process.out.index[0][1]).listFiles().collect { it.getName() }.sort().toString()).match("index_with_gtf") },
+                { assert snapshot(process.out.versions).match("versions") }
+            )
+        }
+
+    }
+
+    test("homo_sapiens-without_gtf") {
+
+        when {
+            process {
+                """
+                input[0] = Channel.of([
+                    [ id:'test_fasta' ],
+                    [file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)]
+                ])
+                input[1] = Channel.of([ [], [] ])
+                """
+            }
+        }
+
+        then {
+            assertAll(
+                { assert process.success },
+                { assert snapshot(file(process.out.index[0][1]).listFiles().collect { it.getName() }.sort().toString()).match("index_without_gtf") },
+                { assert snapshot(process.out.versions).match("versions") }
+            )
+        }
+
+    }
+
+    test("homo_sapiens-without_gtf-stub") {
+
+        options '-stub'
+
+        when {
+            process {
+                """
+                input[0] = Channel.of([
+                    [ id:'test_fasta' ],
+                    [file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)]
+                ])
+                input[1] = Channel.of([ [], [] ])
+                """
+            }
+        }
+
+        then {
+            assertAll(
+                { assert process.success },
+                { assert snapshot(file(process.out.index[0][1]).listFiles().collect { it.getName() }.sort().toString()).match("index_without_gtf") },
                 { assert snapshot(process.out.versions).match("versions") }
             )
         }

************************************************************
