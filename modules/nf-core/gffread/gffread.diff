Changes in module 'nf-core/gffread'
--- modules/nf-core/gffread/environment.yml
+++ modules/nf-core/gffread/environment.yml
@@ -4,4 +4,4 @@
   - bioconda
   - defaults
 dependencies:
-  - bioconda::gffread=0.12.1
+  - bioconda::gffread=0.12.7

--- modules/nf-core/gffread/meta.yml
+++ modules/nf-core/gffread/meta.yml
@@ -13,11 +13,25 @@
       doi: 10.12688/f1000research.23297.1
       licence: ["MIT"]
 input:
+  - meta:
+      type: map
+      description: |
+        Groovy Map containing meta data
+        e.g. [ id:'test' ]
   - gff:
       type: file
       description: A reference file in either the GFF3, GFF2 or GTF format.
       pattern: "*.{gff, gtf}"
+  - fasta:
+      type: file
+      description: A multi-fasta file with the genomic sequences
+      pattern: "*.{fasta,fa,faa,fas,fsa}"
 output:
+  - meta:
+      type: map
+      description: |
+        Groovy Map containing meta data
+        e.g. [ id:'test' ]
   - gtf:
       type: file
       description: GTF file resulting from the conversion of the GFF input file if '-T' argument is present
@@ -25,7 +39,11 @@
   - gffread_gff:
       type: file
       description: GFF3 file resulting from the conversion of the GFF input file if '-T' argument is absent
-      pattern: "*.{gff3}"
+      pattern: "*.gff3"
+  - gffread_fasta:
+      type: file
+      description: Fasta file produced when either of '-w', '-x', '-y' parameters is present
+      pattern: "*.fasta"
   - versions:
       type: file
       description: File containing software versions
@@ -34,3 +52,4 @@
   - "@edmundmiller"
 maintainers:
   - "@edmundmiller"
+  - "@gallvp"

--- modules/nf-core/gffread/main.nf
+++ modules/nf-core/gffread/main.nf
@@ -1,32 +1,59 @@
 process GFFREAD {
-    tag "$gff"
+    tag "$meta.id"
     label 'process_low'
 
     conda "${moduleDir}/environment.yml"
     container "${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?
-        'https://depot.galaxyproject.org/singularity/gffread:0.12.1--h8b12597_0' :
-        'biocontainers/gffread:0.12.1--h8b12597_0' }"
+        'https://depot.galaxyproject.org/singularity/gffread:0.12.7--hdcf5f25_4' :
+        'biocontainers/gffread:0.12.7--hdcf5f25_4' }"
 
     input:
-    path gff
+    tuple val(meta), path(gff)
+    path fasta
 
     output:
-    path "*.gtf"        , emit: gtf         , optional: true
-    path "*.gff3"       , emit: gffread_gff , optional: true
-    path "versions.yml" , emit: versions
+    tuple val(meta), path("*.gtf")  , emit: gtf             , optional: true
+    tuple val(meta), path("*.gff3") , emit: gffread_gff     , optional: true
+    tuple val(meta), path("*.fasta"), emit: gffread_fasta   , optional: true
+    path "versions.yml"             , emit: versions
 
     when:
     task.ext.when == null || task.ext.when
 
     script:
-    def args        = task.ext.args   ?: ''
-    def prefix      = task.ext.prefix ?: "${gff.baseName}"
-    def extension   = args.contains("-T") ? 'gtf' : 'gffread.gff3'
+    def args        = task.ext.args             ?: ''
+    def prefix      = task.ext.prefix           ?: "${meta.id}"
+    def extension   = args.contains("-T")       ? 'gtf' : ( ( ['-w', '-x', '-y' ].any { args.contains(it) } ) ? 'fasta' : 'gff3' )
+    def fasta_arg   = fasta                     ? "-g $fasta" : ''
+    def output_name = "${prefix}.${extension}"
+    def output      = extension == "fasta"      ? "$output_name" : "-o $output_name"
+    def args_sorted = args.replaceAll(/(.*)(-[wxy])(.*)/) { all, pre, param, post -> "$pre $post $param" }.trim()
+    if ( "$output_name" in [ "$gff", "$fasta" ] ) error "Input and output names are the same, use \"task.ext.prefix\" to disambiguate!"
     """
     gffread \\
         $gff \\
-        $args \\
-        -o ${prefix}.${extension}
+        $fasta_arg \\
+        $args_sorted \\
+        $output
+
+    cat <<-END_VERSIONS > versions.yml
+    "${task.process}":
+        gffread: \$(gffread --version 2>&1)
+    END_VERSIONS
+    """
+
+    stub:
+    def args        = task.ext.args             ?: ''
+    def prefix      = task.ext.prefix           ?: "${meta.id}"
+    def extension   = args.contains("-T")       ? 'gtf' : ( ( ['-w', '-x', '-y' ].any { args.contains(it) } ) ? 'fasta' : 'gff3' )
+    def fasta_arg   = fasta                     ? "-g $fasta" : ''
+    def output_name = "${prefix}.${extension}"
+    def output      = extension == "fasta"      ? "$output_name" : "-o $output_name"
+    def args_sorted = args.replaceAll(/(.*)(-[wxy])(.*)/) { all, pre, param, post -> "$pre $post $param" }.trim()
+    if ( "$output_name" in [ "$gff", "$fasta" ] ) error "Input and output names are the same, use \"task.ext.prefix\" to disambiguate!"
+    """
+    touch $output_name
+
     cat <<-END_VERSIONS > versions.yml
     "${task.process}":
         gffread: \$(gffread --version 2>&1)

--- modules/nf-core/gffread/tests/main.nf.test.snap
+++ modules/nf-core/gffread/tests/main.nf.test.snap
@@ -1,24 +1,272 @@
 {
     "sarscov2-gff3-gtf": {
         "content": [
-            [
-                "genome.gtf:md5,2394072d7d31530dfd590c4a117bf6e3"
-            ],
-            [
-                "versions.yml:md5,a71b6cdfa528dd206a238ec64bae13d6"
-            ]
-        ],
-        "timestamp": "2024-01-23T20:00:32.688779117"
+            {
+                "0": [
+                    [
+                        {
+                            "id": "test"
+                        },
+                        "test.gtf:md5,1ea0ae98d3388e0576407dc4a24ef428"
+                    ]
+                ],
+                "1": [
+                    
+                ],
+                "2": [
+                    
+                ],
+                "3": [
+                    "versions.yml:md5,05f671c6c6e530acedad0af0a5948dbd"
+                ],
+                "gffread_fasta": [
+                    
+                ],
+                "gffread_gff": [
+                    
+                ],
+                "gtf": [
+                    [
+                        {
+                            "id": "test"
+                        },
+                        "test.gtf:md5,1ea0ae98d3388e0576407dc4a24ef428"
+                    ]
+                ],
+                "versions": [
+                    "versions.yml:md5,05f671c6c6e530acedad0af0a5948dbd"
+                ]
+            }
+        ],
+        "meta": {
+            "nf-test": "0.8.4",
+            "nextflow": "23.10.1"
+        },
+        "timestamp": "2024-04-09T10:48:56.496187"
     },
     "sarscov2-gff3-gff3": {
         "content": [
-            [
-                "genome.gffread.gff3:md5,a7d40d99dcddac23ac673c473279ea2d"
-            ],
-            [
-                "versions.yml:md5,a71b6cdfa528dd206a238ec64bae13d6"
-            ]
-        ],
-        "timestamp": "2024-01-23T20:07:11.457356625"
+            {
+                "0": [
+                    
+                ],
+                "1": [
+                    [
+                        {
+                            "id": "test"
+                        },
+                        "test.gff3:md5,c4e5da6267c6bee5899a2c204ae1ad91"
+                    ]
+                ],
+                "2": [
+                    
+                ],
+                "3": [
+                    "versions.yml:md5,05f671c6c6e530acedad0af0a5948dbd"
+                ],
+                "gffread_fasta": [
+                    
+                ],
+                "gffread_gff": [
+                    [
+                        {
+                            "id": "test"
+                        },
+                        "test.gff3:md5,c4e5da6267c6bee5899a2c204ae1ad91"
+                    ]
+                ],
+                "gtf": [
+                    
+                ],
+                "versions": [
+                    "versions.yml:md5,05f671c6c6e530acedad0af0a5948dbd"
+                ]
+            }
+        ],
+        "meta": {
+            "nf-test": "0.8.4",
+            "nextflow": "23.10.1"
+        },
+        "timestamp": "2024-04-09T10:49:00.892782"
+    },
+    "sarscov2-gff3-gtf-stub": {
+        "content": [
+            {
+                "0": [
+                    [
+                        {
+                            "id": "test"
+                        },
+                        "test.gtf:md5,d41d8cd98f00b204e9800998ecf8427e"
+                    ]
+                ],
+                "1": [
+                    
+                ],
+                "2": [
+                    
+                ],
+                "3": [
+                    "versions.yml:md5,05f671c6c6e530acedad0af0a5948dbd"
+                ],
+                "gffread_fasta": [
+                    
+                ],
+                "gffread_gff": [
+                    
+                ],
+                "gtf": [
+                    [
+                        {
+                            "id": "test"
+                        },
+                        "test.gtf:md5,d41d8cd98f00b204e9800998ecf8427e"
+                    ]
+                ],
+                "versions": [
+                    "versions.yml:md5,05f671c6c6e530acedad0af0a5948dbd"
+                ]
+            }
+        ],
+        "meta": {
+            "nf-test": "0.8.4",
+            "nextflow": "23.10.1"
+        },
+        "timestamp": "2024-04-09T11:11:26.975666"
+    },
+    "sarscov2-gff3-fasta-stub": {
+        "content": [
+            {
+                "0": [
+                    
+                ],
+                "1": [
+                    
+                ],
+                "2": [
+                    [
+                        {
+                            "id": "test"
+                        },
+                        "test.fasta:md5,d41d8cd98f00b204e9800998ecf8427e"
+                    ]
+                ],
+                "3": [
+                    "versions.yml:md5,05f671c6c6e530acedad0af0a5948dbd"
+                ],
+                "gffread_fasta": [
+                    [
+                        {
+                            "id": "test"
+                        },
+                        "test.fasta:md5,d41d8cd98f00b204e9800998ecf8427e"
+                    ]
+                ],
+                "gffread_gff": [
+                    
+                ],
+                "gtf": [
+                    
+                ],
+                "versions": [
+                    "versions.yml:md5,05f671c6c6e530acedad0af0a5948dbd"
+                ]
+            }
+        ],
+        "meta": {
+            "nf-test": "0.8.4",
+            "nextflow": "23.10.1"
+        },
+        "timestamp": "2024-04-09T11:11:44.34792"
+    },
+    "sarscov2-gff3-gff3-stub": {
+        "content": [
+            {
+                "0": [
+                    
+                ],
+                "1": [
+                    [
+                        {
+                            "id": "test"
+                        },
+                        "test.gff3:md5,d41d8cd98f00b204e9800998ecf8427e"
+                    ]
+                ],
+                "2": [
+                    
+                ],
+                "3": [
+                    "versions.yml:md5,05f671c6c6e530acedad0af0a5948dbd"
+                ],
+                "gffread_fasta": [
+                    
+                ],
+                "gffread_gff": [
+                    [
+                        {
+                            "id": "test"
+                        },
+                        "test.gff3:md5,d41d8cd98f00b204e9800998ecf8427e"
+                    ]
+                ],
+                "gtf": [
+                    
+                ],
+                "versions": [
+                    "versions.yml:md5,05f671c6c6e530acedad0af0a5948dbd"
+                ]
+            }
+        ],
+        "meta": {
+            "nf-test": "0.8.4",
+            "nextflow": "23.10.1"
+        },
+        "timestamp": "2024-04-09T11:11:35.221671"
+    },
+    "sarscov2-gff3-fasta": {
+        "content": [
+            {
+                "0": [
+                    
+                ],
+                "1": [
+                    
+                ],
+                "2": [
+                    [
+                        {
+                            "id": "test"
+                        },
+                        "test.fasta:md5,5f8108fb51739a0588ccf0a251de919a"
+                    ]
+                ],
+                "3": [
+                    "versions.yml:md5,05f671c6c6e530acedad0af0a5948dbd"
+                ],
+                "gffread_fasta": [
+                    [
+                        {
+                            "id": "test"
+                        },
+                        "test.fasta:md5,5f8108fb51739a0588ccf0a251de919a"
+                    ]
+                ],
+                "gffread_gff": [
+                    
+                ],
+                "gtf": [
+                    
+                ],
+                "versions": [
+                    "versions.yml:md5,05f671c6c6e530acedad0af0a5948dbd"
+                ]
+            }
+        ],
+        "meta": {
+            "nf-test": "0.8.4",
+            "nextflow": "23.10.1"
+        },
+        "timestamp": "2024-04-09T10:54:02.88143"
     }
 }
--- modules/nf-core/gffread/tests/main.nf.test
+++ modules/nf-core/gffread/tests/main.nf.test
@@ -18,47 +18,203 @@
             }
             process {
                 """
-                input[0] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gff3", checkIfExists: true)
-                """
-            }
-        }
-
-        then {
-            assertAll (
-                { assert process.success },
-                { assert snapshot(
-                    process.out.gtf,
-                    process.out.versions
-                ).match() },
+                input[0] = [
+                    [id: 'test'],
+                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gff3", checkIfExists: true)
+                ]
+                input[1] = []
+                """
+            }
+        }
+
+        then {
+            assertAll (
+                { assert process.success },
+                { assert snapshot(process.out).match() },
+                { assert process.out.gffread_gff == [] },
+                { assert process.out.gffread_fasta == [] }
+            )
+        }
+
+    }
+
+    test("sarscov2-gff3-gtf-stub") {
+
+        options '-stub'
+        config "./nextflow.config"
+
+        when {
+            params {
+                outdir = "$outputDir"
+            }
+            process {
+                """
+                input[0] = [
+                    [id: 'test'],
+                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gff3", checkIfExists: true)
+                ]
+                input[1] = []
+                """
+            }
+        }
+
+        then {
+            assertAll (
+                { assert process.success },
+                { assert snapshot(process.out).match() },
+                { assert process.out.gffread_gff == [] },
+                { assert process.out.gffread_fasta == [] }
+            )
+        }
+
+    }
+
+    test("sarscov2-gff3-gff3") {
+
+        config "./nextflow-gff3.config"
+
+        when {
+            params {
+                outdir = "$outputDir"
+            }
+            process {
+                """
+                input[0] = [
+                    [id: 'test'],
+                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gff3", checkIfExists: true)
+                ]
+                input[1] = []
+                """
+            }
+        }
+
+        then {
+            assertAll (
+                { assert process.success },
+                { assert snapshot(process.out).match() },
+                { assert process.out.gtf == [] },
+                { assert process.out.gffread_fasta == [] }
+            )
+        }
+
+    }
+
+    test("sarscov2-gff3-gff3-stub") {
+
+        options '-stub'
+        config "./nextflow-gff3.config"
+
+        when {
+            params {
+                outdir = "$outputDir"
+            }
+            process {
+                """
+                input[0] = [
+                    [id: 'test'],
+                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gff3", checkIfExists: true)
+                ]
+                input[1] = []
+                """
+            }
+        }
+
+        then {
+            assertAll (
+                { assert process.success },
+                { assert snapshot(process.out).match() },
+                { assert process.out.gtf == [] },
+                { assert process.out.gffread_fasta == [] }
+            )
+        }
+
+    }
+
+    test("sarscov2-gff3-fasta") {
+
+        config "./nextflow-fasta.config"
+
+        when {
+            params {
+                outdir = "$outputDir"
+            }
+            process {
+                """
+                input[0] = [
+                    [id: 'test'],
+                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gff3", checkIfExists: true)
+                ]
+                input[1] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
+                """
+            }
+        }
+
+        then {
+            assertAll (
+                { assert process.success },
+                { assert snapshot(process.out).match() },
+                { assert process.out.gtf == [] },
                 { assert process.out.gffread_gff == [] }
             )
         }
 
     }
 
-    test("sarscov2-gff3-gff3") {
-
-        config "./nextflow-gff3.config"
-
-        when {
-            params {
-                outdir = "$outputDir"
-            }
-            process {
-                """
-                input[0] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gff3", checkIfExists: true)
-                """
-            }
-        }
-
-        then {
-            assertAll (
-                { assert process.success },
-                { assert snapshot(
-                    process.out.gffread_gff,
-                    process.out.versions
-                ).match() },
-                { assert process.out.gtf == [] },
+    test("sarscov2-gff3-fasta-stub") {
+
+        options '-stub'
+        config "./nextflow-fasta.config"
+
+        when {
+            params {
+                outdir = "$outputDir"
+            }
+            process {
+                """
+                input[0] = [
+                    [id: 'test'],
+                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gff3", checkIfExists: true)
+                ]
+                input[1] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
+                """
+            }
+        }
+
+        then {
+            assertAll (
+                { assert process.success },
+                { assert snapshot(process.out).match() },
+                { assert process.out.gtf == [] },
+                { assert process.out.gffread_gff == [] }
+            )
+        }
+
+    }
+
+    test("sarscov2-gff3-fasta-fail-catch") {
+
+        options '-stub'
+        config "./nextflow-fasta.config"
+
+        when {
+            params {
+                outdir = "$outputDir"
+            }
+            process {
+                """
+                input[0] = [
+                    [id: 'genome'],
+                    file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.gff3", checkIfExists: true)
+                ]
+                input[1] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
+                """
+            }
+        }
+
+        then {
+            assertAll (
+                { assert ! process.success },
+                { assert process.stdout.toString().contains("Input and output names are the same") }
             )
         }
 

--- /dev/null
+++ modules/nf-core/gffread/tests/nextflow-fasta.config
@@ -0,0 +1,5 @@
+process {
+    withName: GFFREAD {
+        ext.args = '-w -S'
+    }
+}

************************************************************
