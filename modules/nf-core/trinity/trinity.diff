Changes in module 'nf-core/trinity'
--- modules/nf-core/trinity/environment.yml
+++ modules/nf-core/trinity/environment.yml
@@ -4,4 +4,4 @@
   - bioconda
   - defaults
 dependencies:
-  - bioconda::trinity=2.13.2
+  - bioconda::trinity=2.15.1

--- modules/nf-core/trinity/meta.yml
+++ modules/nf-core/trinity/meta.yml
@@ -12,7 +12,7 @@
       documentation: "https://github.com/trinityrnaseq/trinityrnaseq/wiki"
       tool_dev_url: "https://github.com/trinityrnaseq/trinityrnaseq/"
       doi: "10.1038/nbt.1883"
-      licence: "['BSD-3-clause']"
+      licence: ["BSD-3-clause"]
 input:
   - meta:
       type: map
@@ -37,7 +37,13 @@
       type: file
       description: de novo assembled transcripts fasta file compressed
       pattern: "*.fa.gz"
+  - log:
+      type: file
+      description: Log from trinity
+      pattern: "*.log"
 authors:
   - "@timslittle"
+  - "@gallvp"
 maintainers:
   - "@timslittle"
+  - "@gallvp"

--- modules/nf-core/trinity/main.nf
+++ modules/nf-core/trinity/main.nf
@@ -1,18 +1,20 @@
 process TRINITY {
     tag "$meta.id"
+    label 'process_high'
     label 'process_high_memory'
 
     conda "${moduleDir}/environment.yml"
     container "${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?
-        'https://depot.galaxyproject.org/singularity/trinity:2.13.2--h00214ad_1':
-        'biocontainers/trinity:2.13.2--h00214ad_1' }"
+        'https://depot.galaxyproject.org/singularity/trinity:2.15.1--pl5321h146fbdb_3':
+        'biocontainers/trinity:2.15.1--pl5321h146fbdb_3' }"
 
     input:
     tuple val(meta), path(reads)
 
     output:
-    tuple val(meta), path("*.fa.gz")       , emit: transcript_fasta
-    path "versions.yml"                    , emit: versions
+    tuple val(meta), path("*.fa.gz")    , emit: transcript_fasta
+    tuple val(meta), path("*.log")      , emit: log
+    path "versions.yml"                 , emit: versions
 
     when:
     task.ext.when == null || task.ext.when
@@ -42,20 +44,36 @@
     # Note that Trinity needs the word 'trinity' in the outdir
 
     Trinity \\
-    --seqType ${seqType_args} \\
-    --max_memory ${avail_mem}G \\
-    ${reads_args} \\
-    --output ${prefix}_trinity \\
-    --CPU $task.cpus \\
-    $args
+        --seqType ${seqType_args} \\
+        --max_memory ${avail_mem}G \\
+        ${reads_args} \\
+        --output ${prefix}_trinity \\
+        --CPU $task.cpus \\
+        $args \\
+        > >(tee ${prefix}.log)
 
-    gzip -cf ${prefix}_trinity.Trinity.fasta > ${prefix}.fa.gz
+    gzip \\
+        -cf \\
+        ${prefix}_trinity.Trinity.fasta \\
+        > ${prefix}.fa.gz
+
+    rm ${prefix}_trinity.Trinity.fasta
 
     cat <<-END_VERSIONS > versions.yml
     "${task.process}":
-        trinity: \$(echo \$(Trinity --version | head -n 1 2>&1) | sed 's/^Trinity version: Trinity-v//' ))
+        trinity: \$(Trinity --version | grep 'Trinity version:' | sed 's/Trinity version: Trinity-//')
     END_VERSIONS
+    """
 
-    # Need to only take the first line of --version since it will warn about not being up-to-date and this messes up the version.yaml.
+    stub:
+    def prefix = task.ext.prefix ?: "${meta.id}"
+    """
+    touch ${prefix}.fa.gz
+    touch ${prefix}.log
+
+    cat <<-END_VERSIONS > versions.yml
+    "${task.process}":
+        trinity: \$(Trinity --version | grep 'Trinity version:' | sed 's/Trinity version: Trinity-//')
+    END_VERSIONS
     """
 }

--- /dev/null
+++ modules/nf-core/trinity/tests/main.nf.test.snap
@@ -0,0 +1,10 @@
+{
+    "versions": {
+        "content": [
+            [
+                "versions.yml:md5,f77f7a5b3e84ea0ee771e0df95895cfb"
+            ]
+        ],
+        "timestamp": "2024-01-11T16:44:00.303918"
+    }
+}
--- /dev/null
+++ modules/nf-core/trinity/tests/tags.yml
@@ -0,0 +1,2 @@
+trinity:
+  - "modules/nf-core/trinity/**"

--- /dev/null
+++ modules/nf-core/trinity/tests/main.nf.test
@@ -0,0 +1,91 @@
+nextflow_process {
+
+    name "Test Process TRINITY"
+    script "../main.nf"
+    process "TRINITY"
+
+    tag "modules"
+    tag "modules_nfcore"
+    tag "trinity"
+
+    test("homo_sapiens-test_rnaseq-paired") {
+        when {
+            process {
+                """
+                input[0] = [
+                    [ id:'test', single_end:false ], // meta map
+                    [
+                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_1_fastq_gz'], checkIfExists: true),
+                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_2_fastq_gz'], checkIfExists: true)
+                    ]
+                ]
+                """
+            }
+        }
+
+        then {
+            assertAll(
+                { assert process.success },
+                { assert snapshot(process.out.versions).match("versions") },
+                { assert path(process.out.log[0][1]).text.contains("All commands completed successfully.") },
+                { assert process.out.transcript_fasta != null },
+            )
+        }
+
+    }
+
+    test("homo_sapiens-test_rnaseq-single") {
+        when {
+            process {
+                """
+                input[0] = [
+                    [ id:'test', single_end:true ], // meta map
+                    [
+                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_1_fastq_gz'], checkIfExists: true)
+                    ]
+                ]
+                """
+            }
+        }
+
+        then {
+            assertAll(
+                { assert process.success },
+                { assert snapshot(process.out.versions).match("versions") },
+                { assert path(process.out.log[0][1]).text.contains("All commands completed successfully.") },
+                { assert process.out.transcript_fasta != null }
+            )
+        }
+
+    }
+
+    test("homo_sapiens-test_rnaseq-stub") {
+
+        options "-stub"
+
+        when {
+            process {
+                """
+                input[0] = [
+                    [ id:'test', single_end:false ], // meta map
+                    [
+                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_1_fastq_gz'], checkIfExists: true),
+                        file(params.test_data['homo_sapiens']['illumina']['test_rnaseq_2_fastq_gz'], checkIfExists: true)
+                    ]
+                ]
+                """
+            }
+        }
+
+        then {
+            assertAll(
+                { assert process.success },
+                { assert snapshot(process.out.versions).match("versions") },
+                { assert process.out.transcript_fasta != null },
+                { assert process.out.log != null },
+            )
+        }
+
+    }
+
+}

************************************************************
