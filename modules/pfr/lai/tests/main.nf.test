nextflow_process {

    name "Test Process LAI"
    script "../main.nf"
    process "LAI"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "lai"
    tag "gt/suffixerator"
    tag "nf-core/gunzip"
    tag "gt/ltrharvest"
    tag "ltrretriever"

    test("homo_sapiens-genome_21_fasta-success") {

        setup {
            run("GUNZIP") {
                script "../../../nf-core/gunzip"

                process {
                    """
                    input[0] = [
                        [ id:'test' ],
                        file('/Users/hrauxr/Projects/nxf-modules/tests/data/chr1.fa.gz', checkIfExists: true)
                    ]
                    """
                }
            }

            run("GT_SUFFIXERATOR") {
                script "../../../pfr/gt/suffixerator"

                process {
                    """
                    input[0] = GUNZIP.out.gunzip
                    """
                }
            }

            run("GT_LTRHARVEST") {
                script "../../../pfr/gt/ltrharvest"

                process {
                    """
                    input[0] = GT_SUFFIXERATOR.out.index
                    """
                }
            }

            run("LTRRETRIEVER") {
                script "../../../pfr/ltrretriever"

                process {
                    """
                    input[0] = GUNZIP.out.gunzip
                    input[1] = GT_LTRHARVEST.out.tabout.map { meta, tabout -> tabout }
                    input[2] = []
                    input[3] = []
                    input[4] = []
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = GUNZIP.out.gunzip
                input[1] = LTRRETRIEVER.out.pass_list.map { meta, pass_list -> pass_list }
                input[2] = LTRRETRIEVER.out.annotation_out.map { meta, annotation_out -> annotation_out }
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.log.get(0).get(1)).getText().contains("Dependency checking: Passed!") },
                { assert path(process.out.log.get(0).get(1)).getText().contains("Calculate LAI:") },
                { assert path(process.out.log.get(0).get(1)).getText().contains("Total LTR sequence content (0%) is too low for accurate LAI calculation") },
                { assert path(process.out.log.get(0).get(1)).getText().contains("Sorry, LAI is not applicable on the current genome assembly.") },
                { assert process.out.lai_out == [] },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

    test("stub") {

        options '-stub'

        when {
            process {
                """
                input[0] = [
                    [ id:'test' ],
                    file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                ]
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

}
